version: "3.9"

services:
  fastapi:
    container_name: fastapi_app
    build:
      context: .
    env_file: ".env"
    entrypoint: ["sh", "-c", "uv run alembic upgrade head && uv run bash scripts/start_gunicorn.sh"]
    ports:
      - "${GUNICORN__PORT}:${GUNICORN__PORT}"
    volumes:
      - ./logs:/usr/app/src/logs
    networks:
      - custom
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started

  db:
    container_name: postgres_db
    image: postgres:latest
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "${DB__USER}"
      POSTGRES_PASSWORD: "${DB__PASSWORD}"
      POSTGRES_DB: "${DB__NAME}"
    networks:
      - custom
    healthcheck:
      test: [ "CMD-SHELL", "psql -U ${DB__USER}", "pg_isready", "-U", "${DB__USER}", "-d", "${DB__NAME}" ]
      interval: 3s
      timeout: 10s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - custom

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    command: >
      sh -c "
      /etc/confluent/docker/run &
      sleep 10 &&
      kafka-topics --create --topic ${KAFKA__TOPIC_NAME} --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1 &&
      kafka-topics --list --bootstrap-server localhost:9092 &&
      tail -f /dev/null
      "
    networks:
      - custom

networks:
  custom:
    driver: bridge
